{"version":3,"sources":["../../src/addon/messages/pages/discussion/discussion.module.ts","../../src/addon/messages/pages/discussion/discussion.ts"],"names":[],"mappings":"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","file":"102.js","sourcesContent":["// (C) Copyright 2015 Martin Dougiamas\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AddonMessagesDiscussionPage } from './discussion';\nimport { CoreComponentsModule } from '@components/components.module';\nimport { CoreDirectivesModule } from '@directives/directives.module';\nimport { CorePipesModule } from '@pipes/pipes.module';\n\n@NgModule({\n    declarations: [\n        AddonMessagesDiscussionPage,\n    ],\n    imports: [\n        CoreComponentsModule,\n        CoreDirectivesModule,\n        CorePipesModule,\n        IonicPageModule.forChild(AddonMessagesDiscussionPage),\n        TranslateModule.forChild()\n    ],\n})\nexport class AddonMessagesDiscussionPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/messages/pages/discussion/discussion.module.ts","// (C) Copyright 2015 Martin Dougiamas\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, ViewChild } from '@angular/core';\nimport { IonicPage, NavParams, NavController, Content } from 'ionic-angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CoreEventsProvider } from '@providers/events';\nimport { CoreSitesProvider } from '@providers/sites';\nimport { AddonMessagesProvider } from '../../providers/messages';\nimport { AddonMessagesSyncProvider } from '../../providers/sync';\nimport { CoreUserProvider } from '@core/user/providers/user';\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\nimport { CoreUtilsProvider } from '@providers/utils/utils';\nimport { CoreLoggerProvider } from '@providers/logger';\nimport { CoreAppProvider } from '@providers/app';\nimport { coreSlideInOut } from '@classes/animations';\nimport { Md5 } from 'ts-md5/dist/md5';\nimport * as moment from 'moment';\n\n/**\n * Page that displays a message discussion page.\n */\n@IonicPage({ segment: 'addon-messages-discussion' })\n@Component({\n    selector: 'page-addon-messages-discussion',\n    templateUrl: 'discussion.html',\n    animations: [coreSlideInOut]\n})\nexport class AddonMessagesDiscussionPage implements OnDestroy {\n    @ViewChild(Content) content: Content;\n\n    protected siteId: string;\n    protected fetching: boolean;\n    protected polling;\n    protected logger;\n\n    protected unreadMessageFrom = 0;\n    protected messagesBeingSent = 0;\n    protected pagesLoaded = 1;\n    protected lastMessage = {text: '', timecreated: 0};\n    protected keepMessageMap = {};\n    protected syncObserver: any;\n    protected oldContentHeight = 0;\n    protected keyboardObserver: any;\n\n    userId: number;\n    currentUserId: number;\n    title: string;\n    profileLink: string;\n    showProfileLink: boolean;\n    loaded = false;\n    showKeyboard = false;\n    canLoadMore = false;\n    messages = [];\n    showDelete = false;\n    canDelete = false;\n    scrollBottom = true;\n    viewDestroyed = false;\n\n    constructor(private eventsProvider: CoreEventsProvider, sitesProvider: CoreSitesProvider, navParams: NavParams,\n            private userProvider: CoreUserProvider, private navCtrl: NavController, private messagesSync: AddonMessagesSyncProvider,\n            private domUtils: CoreDomUtilsProvider, private messagesProvider: AddonMessagesProvider, logger: CoreLoggerProvider,\n            private utils: CoreUtilsProvider, private appProvider: CoreAppProvider, private translate: TranslateService) {\n        this.siteId = sitesProvider.getCurrentSiteId();\n        this.currentUserId = sitesProvider.getCurrentSiteUserId();\n\n        this.logger = logger.getInstance('AddonMessagesDiscussionPage');\n\n        this.userId = navParams.get('userId');\n        this.showKeyboard = navParams.get('showKeyboard');\n\n        // Refresh data if this discussion is synchronized automatically.\n        this.syncObserver = eventsProvider.on(AddonMessagesSyncProvider.AUTO_SYNCED, (data) => {\n            if (data.userId == this.userId) {\n                // Fetch messages.\n                this.fetchData();\n\n                // Show first warning if any.\n                if (data.warnings && data.warnings[0]) {\n                    this.domUtils.showErrorModal(data.warnings[0]);\n                }\n            }\n        }, this.siteId);\n    }\n\n    /**\n     * Adds a new message to the message list.\n     *\n     * @param {any} message Message to be added.\n     * @param {boolean} [keep=true] If set the keep flag or not.\n     */\n    protected addMessage(message: any, keep: boolean = true): void {\n        // Use smallmessage instead of message ID because ID changes when a message is read.\n        message.hash = Md5.hashAsciiStr(message.smallmessage) + '#' + message.timecreated + '#' + message.useridfrom;\n        if (typeof this.keepMessageMap[message.hash] === 'undefined') {\n            // Message not added to the list. Add it now.\n            this.messages.push(message);\n        }\n        // Message needs to be kept in the list.\n        this.keepMessageMap[message.hash] = keep;\n    }\n\n    /**\n     * Remove a message if it shouldn't be in the list anymore.\n     *\n     * @param {string} hash Hash of the message to be removed.\n     */\n    protected removeMessage(hash: any): void {\n        if (this.keepMessageMap[hash]) {\n            // Selected to keep it, clear the flag.\n            this.keepMessageMap[hash] = false;\n\n            return;\n        }\n\n        delete this.keepMessageMap[hash];\n\n        const position = this.messages.findIndex((message) => {\n            return message.hash == hash;\n        });\n        if (position > 0) {\n            this.messages.splice(position, 1);\n        }\n    }\n\n    /**\n     * Runs when the page has loaded. This event only happens once per page being created.\n     * If a page leaves but is cached, then this event will not fire again on a subsequent viewing.\n     * Setup code for the page.\n     */\n    ionViewDidLoad(): void {\n        // Disable the profile button if we're already coming from a profile.\n        const backViewPage = this.navCtrl.getPrevious() && this.navCtrl.getPrevious().component.name;\n        this.showProfileLink = !backViewPage || backViewPage !== 'CoreUserProfilePage';\n\n        // Get the user profile to retrieve the user fullname and image.\n        this.userProvider.getProfile(this.userId, undefined, true).then((user) => {\n            if (!this.title) {\n                this.title = user.fullname;\n            }\n            this.profileLink = user.profileimageurl;\n        });\n\n        // Synchronize messages if needed.\n        this.messagesSync.syncDiscussion(this.userId).catch(() => {\n            // Ignore errors.\n        }).then((warnings) => {\n            if (warnings && warnings[0]) {\n                this.domUtils.showErrorModal(warnings[0]);\n            }\n\n            // Fetch the messages for the first time.\n            return this.fetchData().then(() => {\n                if (!this.title && this.messages.length) {\n                    // Didn't receive the fullname via argument. Try to get it from messages.\n                    // It's possible that name cannot be resolved when no messages were yet exchanged.\n                    if (this.messages[0].useridto != this.currentUserId) {\n                        this.title = this.messages[0].usertofullname || '';\n                    } else {\n                        this.title = this.messages[0].userfromfullname || '';\n                    }\n                }\n            }).catch((error) => {\n                this.domUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingmessages', true);\n            }).finally(() => {\n                this.checkCanDelete();\n                this.resizeContent();\n                this.loaded = true;\n            });\n        });\n\n        // Recalculate footer position when keyboard is shown or hidden.\n        this.keyboardObserver = this.eventsProvider.on(CoreEventsProvider.KEYBOARD_CHANGE, (kbHeight) => {\n            this.content.resize();\n        });\n    }\n\n    /**\n     * Runs when the page has fully entered and is now the active page.\n     * This event will fire, whether it was the first load or a cached page.\n     */\n    ionViewDidEnter(): void {\n        this.setPolling();\n    }\n\n    /**\n     * Runs when the page is about to leave and no longer be the active page.\n     */\n    ionViewWillLeave(): void {\n        this.unsetPolling();\n    }\n\n    /**\n     * Convenience function to fetch messages.\n     * @return {Promise<any>} Resolved when done.\n     */\n    protected fetchData(): Promise<any> {\n        this.logger.debug(`Polling new messages for discussion with user '${this.userId}'`);\n        if (this.messagesBeingSent > 0) {\n            // We do not poll while a message is being sent or we could confuse the user.\n            // Otherwise, his message would disappear from the list, and he'd have to wait for the interval to check for messages.\n            return Promise.reject(null);\n        } else if (this.fetching) {\n            // Already fetching.\n            return Promise.reject(null);\n        }\n\n        this.fetching = true;\n\n        // Wait for synchronization process to finish.\n        return this.messagesSync.waitForSync(this.userId).then(() => {\n            // Fetch messages. Invalidate the cache before fetching.\n            return this.messagesProvider.invalidateDiscussionCache(this.userId).catch(() => {\n                // Ignore errors.\n            });\n        }).then(() => {\n            return this.getDiscussion(this.pagesLoaded);\n        }).then((messages) => {\n            if (this.viewDestroyed) {\n                return Promise.resolve();\n            }\n\n            // Check if we are at the bottom to scroll it after render.\n            this.scrollBottom = this.domUtils.getScrollHeight(this.content) - this.domUtils.getScrollTop(this.content) ===\n                this.domUtils.getContentHeight(this.content);\n\n            if (this.messagesBeingSent > 0) {\n                // Ignore polling due to a race condition.\n                return Promise.reject(null);\n            }\n\n            // Add new messages to the list and mark the messages that should still be displayed.\n            messages.forEach((message) => {\n                this.addMessage(message);\n            });\n\n            // Remove messages that shouldn't be in the list anymore.\n            for (const hash in this.keepMessageMap) {\n                this.removeMessage(hash);\n            }\n\n            // Sort the messages.\n            this.messagesProvider.sortMessages(this.messages);\n\n            // Notify that there can be a new message.\n            this.notifyNewMessage();\n\n            // Mark retrieved messages as read if they are not.\n            this.markMessagesAsRead();\n        }).finally(() => {\n            this.fetching = false;\n        });\n    }\n\n    /**\n     * Get a discussion. Can load several \"pages\".\n     *\n     * @param  {number}  pagesToLoad          Number of pages to load.\n     * @param  {number}  [lfReceivedUnread=0] Number of unread received messages already fetched, so fetch will be done from this.\n     * @param  {number}  [lfReceivedRead=0]   Number of read received messages already fetched, so fetch will be done from this.\n     * @param  {number}  [lfSentUnread=0]     Number of unread sent messages already fetched, so fetch will be done from this.\n     * @param  {number}  [lfSentRead=0]       Number of read sent messages already fetched, so fetch will be done from this.\n     * @return {Promise<any>}  Resolved when done.\n     */\n    protected getDiscussion(pagesToLoad: number, lfReceivedUnread: number = 0, lfReceivedRead: number = 0, lfSentUnread: number = 0,\n            lfSentRead: number = 0): Promise<any> {\n\n        // Only get offline messages if we're loading the first \"page\".\n        const excludePending = lfReceivedUnread > 0 || lfReceivedRead > 0 || lfSentUnread > 0 || lfSentRead > 0;\n\n        // Get next messages.\n        return this.messagesProvider.getDiscussion(this.userId, excludePending, lfReceivedUnread, lfReceivedRead, lfSentUnread,\n                lfSentRead).then((result) => {\n\n            pagesToLoad--;\n            if (pagesToLoad > 0 && result.canLoadMore) {\n                // More pages to load. Calculate new limit froms.\n                result.messages.forEach((message) => {\n                    if (!message.pending) {\n                        if (message.useridfrom == this.userId) {\n                            if (message.read) {\n                                lfReceivedRead++;\n                            } else {\n                                lfReceivedUnread++;\n                            }\n                        } else {\n                            if (message.read) {\n                                lfSentRead++;\n                            } else {\n                                lfSentUnread++;\n                            }\n                        }\n                    }\n                });\n\n                // Get next messages.\n                return this.getDiscussion(pagesToLoad, lfReceivedUnread, lfReceivedRead, lfSentUnread, lfSentRead)\n                        .then((nextMessages) => {\n                    return result.messages.concat(nextMessages);\n                });\n            } else {\n                // No more messages to load, return them.\n                this.canLoadMore = result.canLoadMore;\n\n                return result.messages;\n            }\n        });\n    }\n\n    /**\n     * Mark messages as read.\n     */\n    protected markMessagesAsRead(): void {\n        let readChanged = false;\n        const promises = [];\n\n        if (this.messagesProvider.isMarkAllMessagesReadEnabled()) {\n            let messageUnreadFound = false;\n            // Mark all messages at a time if one messages is unread.\n            for (const x in this.messages) {\n                const message = this.messages[x];\n                // If an unread message is found, mark all messages as read.\n                if (message.useridfrom != this.currentUserId && message.read == 0) {\n                    messageUnreadFound = true;\n                    break;\n                }\n            }\n            if (messageUnreadFound) {\n                this.setUnreadLabelPosition();\n                promises.push(this.messagesProvider.markAllMessagesRead(this.userId).then(() => {\n                    readChanged = true;\n                    // Mark all messages as read.\n                    this.messages.forEach((message) => {\n                        message.read = 1;\n                    });\n                }));\n            }\n        } else {\n            this.setUnreadLabelPosition();\n            // Mark each message as read one by one.\n            this.messages.forEach((message) => {\n                // If the message is unread, call this.messagesProvider.markMessageRead.\n                if (message.useridfrom != this.currentUserId && message.read == 0) {\n                    promises.push(this.messagesProvider.markMessageRead(message.id).then(() => {\n                        readChanged = true;\n                        message.read = 1;\n                    }));\n                }\n            });\n        }\n\n        Promise.all(promises).finally(() => {\n            if (readChanged) {\n                this.eventsProvider.trigger(AddonMessagesProvider.READ_CHANGED_EVENT, {\n                    userId: this.userId\n                }, this.siteId);\n            }\n        });\n    }\n\n    /**\n     * Notify the last message found so discussions list controller can tell if last message should be updated.\n     */\n    protected notifyNewMessage(): void {\n        const last = this.messages[this.messages.length - 1];\n\n        let trigger = false;\n        if (!last) {\n            this.lastMessage = {text: '', timecreated: 0};\n            trigger = true;\n        } else if (last.text !== this.lastMessage.text || last.timecreated !== this.lastMessage.timecreated) {\n            this.lastMessage = {text: last.text, timecreated: last.timecreated};\n            trigger = true;\n        }\n\n        if (trigger) {\n            // Update discussions last message.\n            this.eventsProvider.trigger(AddonMessagesProvider.NEW_MESSAGE_EVENT, {\n                userId: this.userId,\n                message: this.lastMessage.text,\n                timecreated: this.lastMessage.timecreated\n            }, this.siteId);\n\n            // Update navBar links and buttons.\n            const newCanDelete = (last && last.id && this.messages.length == 1) || this.messages.length > 1;\n            if (this.canDelete != newCanDelete) {\n                this.checkCanDelete();\n            }\n        }\n    }\n\n    /**\n     * Set the place where the unread label position has to be.\n     */\n    protected setUnreadLabelPosition(): void {\n        if (this.unreadMessageFrom != 0) {\n            return;\n        }\n\n        let previousMessageRead = false;\n\n        for (const x in this.messages) {\n            const message = this.messages[x];\n            if (message.useridfrom != this.currentUserId) {\n                // Place unread from message label only once.\n                message.unreadFrom = message.read == 0 && previousMessageRead;\n\n                if (message.unreadFrom) {\n                    // Save where the label is placed.\n                    this.unreadMessageFrom = parseInt(message.id, 10);\n                    break;\n                }\n\n                previousMessageRead = message.read != 0;\n            }\n        }\n\n        // Do not update the message unread from label on next refresh.\n        if (this.unreadMessageFrom == 0) {\n            // Using negative to indicate the label is not placed but should not be placed.\n            this.unreadMessageFrom = -1;\n        }\n    }\n\n    /**\n     * Check if there's any message in the list that can be deleted.\n     */\n    protected checkCanDelete(): void {\n        // All messages being sent should be at the end of the list.\n        const first = this.messages[0];\n        this.canDelete = first && !first.sending;\n    }\n\n    /**\n     * Hide unread label when sending messages.\n     */\n    protected hideUnreadLabel(): void {\n        if (this.unreadMessageFrom > 0) {\n            for (const x in this.messages) {\n                const message = this.messages[x];\n                if (message.id == this.unreadMessageFrom) {\n                    message.unreadFrom = false;\n                    break;\n                }\n            }\n\n            // Label hidden.\n            this.unreadMessageFrom = -1;\n        }\n    }\n\n    /**\n     * Wait until fetching is false.\n     * @return {Promise<void>} Resolved when done.\n     */\n    protected waitForFetch(): Promise<void> {\n        if (!this.fetching) {\n            return Promise.resolve();\n        }\n\n        const deferred = this.utils.promiseDefer();\n\n        setTimeout(() => {\n            return this.waitForFetch().finally(() => {\n                deferred.resolve();\n            });\n        }, 400);\n\n        return deferred.promise;\n    }\n\n    /**\n     * Set a polling to get new messages every certain time.\n     */\n    protected setPolling(): void {\n        if (!this.polling) {\n            // Start polling.\n            this.polling = setInterval(() => {\n                this.fetchData().catch(() => {\n                    // Ignore errors.\n                });\n            }, AddonMessagesProvider.POLL_INTERVAL);\n        }\n    }\n\n    /**\n     * Unset polling.\n     */\n    protected unsetPolling(): void {\n        if (this.polling) {\n            this.logger.debug(`Cancelling polling for conversation with user '${this.userId}'`);\n            clearInterval(this.polling);\n            this.polling = undefined;\n        }\n    }\n\n    /**\n     * Copy message to clipboard\n     *\n     * @param {string} text Message text to be copied.\n     */\n    copyMessage(text: string): void {\n        this.utils.copyToClipboard(text);\n    }\n\n    /**\n     * Function to delete a message.\n     *\n     * @param {any} message  Message object to delete.\n     * @param {number} index Index where the mesasge is to delete it from the view.\n     */\n    deleteMessage(message: any, index: number): void {\n        const langKey = message.pending ? 'core.areyousure' : 'addon.messages.deletemessageconfirmation';\n        this.domUtils.showConfirm(this.translate.instant(langKey)).then(() => {\n            const modal = this.domUtils.showModalLoading('core.deleting', true);\n\n            return this.messagesProvider.deleteMessage(message).then(() => {\n                 // Remove message from the list without having to wait for re-fetch.\n                this.messages.splice(index, 1);\n                this.removeMessage(message.hash);\n                this.notifyNewMessage();\n\n                this.fetchData(); // Re-fetch messages to update cached data.\n            }).finally(() => {\n                modal.dismiss();\n            });\n        }).catch((error) => {\n            this.domUtils.showErrorModalDefault(error, 'addon.messages.errordeletemessage', true);\n        });\n    }\n\n    /**\n     * Function to load previous messages.\n     *\n     * @param {any} [infiniteScroll] Infinite scroll object.\n     * @return {Promise<any>} Resolved when done.\n     */\n    loadPrevious(infiniteScroll: any): Promise<any> {\n        // If there is an ongoing fetch, wait for it to finish.\n        return this.waitForFetch().finally(() => {\n            this.pagesLoaded++;\n\n            this.fetchData().catch((error) => {\n                this.pagesLoaded--;\n                this.domUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingmessages', true);\n            }).finally(() => {\n                infiniteScroll.complete();\n            });\n        });\n    }\n\n    /**\n     * Content or scroll has been resized. For content, only call it if it's been added on top.\n     */\n    resizeContent(): void {\n        let top = this.content.getContentDimensions().scrollTop;\n        this.content.resize();\n\n        // Wait for new content height to be calculated.\n        setTimeout(() => {\n            // Visible content size changed, maintain the bottom position.\n            if (!this.viewDestroyed && this.content && this.domUtils.getContentHeight(this.content) != this.oldContentHeight) {\n                if (!top) {\n                    top = this.content.getContentDimensions().scrollTop;\n                }\n\n                top += this.oldContentHeight - this.domUtils.getContentHeight(this.content);\n                this.oldContentHeight = this.domUtils.getContentHeight(this.content);\n\n                this.domUtils.scrollTo(this.content, 0, top, 0);\n            }\n        });\n    }\n\n    /**\n     * Scroll bottom when render has finished.\n     */\n    scrollToBottom(): void {\n        // Check if scroll is at bottom. If so, scroll bottom after rendering since there might be something new.\n        if (this.scrollBottom) {\n             // Need a timeout to leave time to the view to be rendered.\n            setTimeout(() => {\n                if (!this.viewDestroyed) {\n                    this.domUtils.scrollToBottom(this.content, 0);\n                }\n            });\n            this.scrollBottom = false;\n        }\n    }\n\n    /**\n     * Sends a message to the server.\n     * @param {string} text Message text.\n     */\n    sendMessage(text: string): void {\n        let message;\n\n        this.hideUnreadLabel();\n\n        this.showDelete = false;\n        this.scrollBottom = true;\n\n        message = {\n            pending: true,\n            sending: true,\n            useridfrom: this.currentUserId,\n            smallmessage: text,\n            text: text,\n            timecreated: new Date().getTime()\n        };\n        this.addMessage(message, false);\n\n        this.messagesBeingSent++;\n\n        // If there is an ongoing fetch, wait for it to finish.\n        // Otherwise, if a message is sent while fetching it could disappear until the next fetch.\n        this.waitForFetch().finally(() => {\n            this.messagesProvider.sendMessage(this.userId, text).then((data) => {\n                let promise;\n\n                this.messagesBeingSent--;\n\n                if (data.sent) {\n                    // Message was sent, fetch messages right now.\n                    promise = this.fetchData();\n                } else {\n                    promise = Promise.reject(null);\n                }\n\n                promise.catch(() => {\n                    // Fetch failed or is offline message, mark the message as sent.\n                    // If fetch is successful there's no need to mark it because the fetch will already show the message received.\n                    message.sending = false;\n                    if (data.sent) {\n                        // Message sent to server, not pending anymore.\n                        message.pending = false;\n                    } else if (data.message) {\n                        message.timecreated = data.message.timecreated;\n                    }\n\n                    this.notifyNewMessage();\n                });\n            }).catch((error) => {\n                this.messagesBeingSent--;\n\n                // Only close the keyboard if an error happens.\n                // We want the user to be able to send multiple messages without the keyboard being closed.\n                this.appProvider.closeKeyboard();\n\n                this.domUtils.showErrorModalDefault(error, 'addon.messages.messagenotsent', true);\n                this.removeMessage(message.hash);\n            });\n        });\n    }\n\n    /**\n     * Check date should be shown on message list for the current message.\n     * If date has changed from previous to current message it should be shown.\n     *\n     * @param {any} message       Current message where to show the date.\n     * @param {any} [prevMessage] Previous message where to compare the date with.\n     * @return {boolean}  If date has changed and should be shown.\n     */\n    showDate(message: any, prevMessage?: any): boolean {\n        if (!prevMessage) {\n            // First message, show it.\n            return true;\n        } else if (message.pending) {\n            // If pending, it has no date, not show.\n            return false;\n        }\n\n        // Check if day has changed.\n        return !moment(message.timecreated).isSame(prevMessage.timecreated, 'day');\n    }\n\n    /**\n     * Toggles delete state.\n     */\n    toggleDelete(): void {\n        this.showDelete = !this.showDelete;\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        // Unset again, just in case.\n        this.unsetPolling();\n        this.syncObserver && this.syncObserver.off();\n        this.keyboardObserver && this.keyboardObserver.off();\n        this.viewDestroyed = true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/messages/pages/discussion/discussion.ts"],"sourceRoot":""}