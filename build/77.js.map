{"version":3,"sources":["../../src/addon/mod/glossary/pages/entry/entry.module.ts","../../src/addon/mod/glossary/pages/entry/entry.ts"],"names":[],"mappings":"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","file":"77.js","sourcesContent":["// (C) Copyright 2015 Martin Dougiamas\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CoreComponentsModule } from '@components/components.module';\nimport { CoreDirectivesModule } from '@directives/directives.module';\nimport { CorePipesModule } from '@pipes/pipes.module';\nimport { AddonModGlossaryEntryPage } from './entry';\n\n@NgModule({\n    declarations: [\n        AddonModGlossaryEntryPage,\n    ],\n    imports: [\n        CoreComponentsModule,\n        CoreDirectivesModule,\n        CorePipesModule,\n        IonicPageModule.forChild(AddonModGlossaryEntryPage),\n        TranslateModule.forChild()\n    ],\n})\nexport class AddonModForumDiscussionPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/mod/glossary/pages/entry/entry.module.ts","// (C) Copyright 2015 Martin Dougiamas\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component } from '@angular/core';\nimport { IonicPage, NavParams } from 'ionic-angular';\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\nimport { AddonModGlossaryProvider } from '../../providers/glossary';\n\n/**\n * Page that displays a glossary entry.\n */\n@IonicPage({ segment: 'addon-mod-glossary-entry' })\n@Component({\n    selector: 'page-addon-mod-glossary-entry',\n    templateUrl: 'entry.html',\n})\nexport class AddonModGlossaryEntryPage {\n    component = AddonModGlossaryProvider.COMPONENT;\n    componentId: number;\n    entry: any;\n    loaded = false;\n    showAuthor = false;\n    showDate = false;\n\n    protected courseId: number;\n    protected entryId: number;\n\n    constructor(navParams: NavParams,\n            private domUtils: CoreDomUtilsProvider,\n            private glossaryProvider: AddonModGlossaryProvider) {\n        this.courseId = navParams.get('courseId');\n        this.entryId = navParams.get('entryId');\n    }\n\n    /**\n     * View loaded.\n     */\n    ionViewDidLoad(): void {\n        this.fetchEntry().then(() => {\n            this.glossaryProvider.logEntryView(this.entry.id);\n        }).finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param {any} [refresher] Refresher.\n     * @return {Promise<any>} Promise resolved when done.\n     */\n     doRefresh(refresher?: any): Promise<any> {\n        return this.glossaryProvider.invalidateEntry(this.entry.id).catch(() => {\n            // Ignore errors.\n        }).then(() => {\n            return this.fetchEntry(true);\n        }).finally(() => {\n            refresher && refresher.complete();\n        });\n    }\n\n    /**\n     * Convenience function to get the glossary entry.\n     *\n     * @param {boolean} [refresh] Whether we're refreshing data.\n     * @return {Promise<any>} Promise resolved when done.\n     */\n    protected fetchEntry(refresh?: boolean): Promise<any> {\n        return this.glossaryProvider.getEntry(this.entryId).then((result) => {\n            this.entry = result;\n\n            if (!refresh) {\n                // Load the glossary.\n                return this.glossaryProvider.getGlossaryById(this.courseId, this.entry.glossaryid).then((glossary) => {\n                    this.componentId = glossary.coursemodule;\n\n                    switch (glossary.displayformat) {\n                        case 'fullwithauthor':\n                        case 'encyclopedia':\n                            this.showAuthor = true;\n                            this.showDate = true;\n                            break;\n                        case 'fullwithoutauthor':\n                            this.showAuthor = false;\n                            this.showDate = true;\n                            break;\n                        default: // Default, and faq, simple, entrylist, continuous.\n                            this.showAuthor = false;\n                            this.showDate = false;\n                    }\n                });\n            }\n        }).catch((error) => {\n            this.domUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingentry', true);\n\n            return Promise.reject(null);\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/mod/glossary/pages/entry/entry.ts"],"sourceRoot":""}